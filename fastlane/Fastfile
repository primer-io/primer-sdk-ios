default_platform(:ios)

#----------------------- CONSTANTS -------------------------#

# Appetize
appetize_api_token = ENV['APPETIZE_API_TOKEN']

# Github
github_run_id = ENV["GITHUB_RUN_ID"]
github_run_number = ENV["GITHUB_RUN_NUMBER"]

# Xcode
app_workspace = "PrimerSDK.xcworkspace"

app_xcode_proj = "Debug App/Primer.io Debug App.xcodeproj"
app_scheme = "Debug App"

spm_app_scheme = "Debug App SPM"
spm_app_xcode_proj = "Debug App/Primer.io Debug App SPM.xcodeproj"

info_plist_path = "Debug App/Info.plist"

default_sim_version = "18.4"

# Packages
app_output_path = "/var/tmp/Primer.io_Debug_App.xcarchive/Products/Applications/Debug App.app"
app_output_archive_path = "/var/tmp/Primer.io_Debug_App.xcarchive"

# Utils
sdk_version_name_source_branch = ENV['SOURCE_BRANCH']
source_branch_trimmed = ENV['SOURCE_BRANCH']&.gsub("refs/heads/", "")
build_type = ENV['BUILD_TYPE'] || "preview"

podfile_path = "Debug App/Podfile"
pr_number = ENV['PR_NUMBER']

sdk_demo_api_url = "https://sdk-demo.primer.io/api/mobile/ios/"
sdk_demo_url = "https://sdk-demo.primer.io/"

ENV["FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT"] = "120"

#--------------------- END CONSTANTS -----------------------#

#----------------------- FASTLANE -------------------------#

platform :ios do

###################### PUBLIC LANES #######################

  lane :tests do

    common_pre_build_action

    cocoapods(
      clean_install: true,
      use_bundle_exec: true,
      podfile: podfile_path
    )

    run_tests(workspace: app_workspace,
              scheme: "PrimerSDKTests",
              destination: "platform=iOS Simulator,name=iPhone 16",
              xcargs: "EXCLUDED_ARCHS[sdk=iphonesimulator*]=arm64",
              skip_package_dependencies_resolution: true)
  end

  lane :ui_tests do
    run_tests(workspace: app_workspace,
              devices: ["iPhone SE", "iPhone 16"])
  end

  lane :danger_check do

    danger(
      danger_id: "check_on_all_prs",
      dangerfile: "Dangerfile",
      github_api_token: ENV["GITHUB_TOKEN"],
      verbose: true,
      remove_previous_comments: true
    )

  end

  lane :qa_release do

    common_pre_build_action

    cocoapods(
      clean_install: true,
      use_bundle_exec: true,
      podfile: podfile_path
    )

    # Build for lambdatest
    build_app(
      scheme: app_scheme,
      workspace: app_workspace,
      configuration: "Debug",
      include_bitcode: false,
      export_method: "development",
      xcargs: "-allowProvisioningUpdates"
    )

    # Upload to LambdaTest
    upload_to_lambdatest_and_save_id(
      file_path: ENV["IPA_OUTPUT_PATH"]
    )

    # Upload to Firebase
    firebase_app_distribution(
      service_credentials_file: "firebase_credentials.json",
      app: "1:1024117832450:ios:d8c2e74c66341d8cf3201b",
      groups: ENV["FIREBASE_COMMA_SEPARATED_TEST_GROUPS"],
      release_notes: "QA release: #{source_branch_trimmed}"
    )

  end

  desc 'This action tests the SDK using a SPM test target'
  lane :test_sdk do |options|
    common_pre_build_action

    sim_version = options[:sim_version] || default_sim_version

    run_tests(
      package_path: ".",
      scheme: "PrimerSDKTests",
      sdk: "iphonesimulator#{sim_version}",
      destination: "OS=#{sim_version},name=iPhone 16",
      result_bundle: true,
      code_coverage: true,
      output_directory: Dir.pwd + "/test_output"
    )
  end

  desc 'This action tests the Debug App using a Xcode test target'
  lane :test_debug_app do |options|
    common_pre_build_action

    sim_version = options[:sim_version] || default_sim_version

    cocoapods(
      clean_install: true,
      use_bundle_exec: true,
      podfile: podfile_path
    )

    run_tests(
      workspace: app_workspace,
      scheme: app_scheme,
      configuration: "Debug",
      sdk: "iphonesimulator#{sim_version}",
      destination: "OS=#{sim_version},name=iPhone 16",
      result_bundle: true,
      code_coverage: true,
      clean: true,
      output_directory: Dir.pwd + "/test_output"
    )
  end

  desc 'This action tests both SDK and Debug App via SPM'
  lane :test_sdk_and_debug_app do |options|
    common_pre_build_action
    sim_version = options[:sim_version] || default_sim_version
    
    run_tests(
      package_path: ".",
      scheme: "PrimerSDKTests",
      sdk: "iphonesimulator#{sim_version}",
      destination: "OS=#{sim_version},name=iPhone 16",
      result_bundle: true,
      code_coverage: true,
      output_directory: Dir.pwd + "/test_output"
    )
    
    run_tests(
      package_path: ".",
      scheme: "DebugAppTests",
      sdk: "iphonesimulator#{sim_version}",
      destination: "OS=#{sim_version},name=iPhone 16",
      result_bundle: true,
      code_coverage: true,
      output_directory: Dir.pwd + "/test_output"
    )
  end

  lane :build_cocoapods do |options|
    common_pre_build_action

    cocoapods(
      clean_install: true,
      use_bundle_exec: true,
      podfile: podfile_path
    )

    # Build for appetize

    build_app(
      scheme: app_scheme,
      sdk: "iphonesimulator", # Appetize needs a simulator app
      workspace: app_workspace,
      configuration: "Debug",
      destination: "generic/platform=iOS Simulator",
      xcargs: "EXCLUDED_ARCHS[sdk=iphonesimulator*]=arm64",
      include_bitcode: false,
      export_method: "development",
      archive_path: app_output_archive_path,
      # Build speed optimisation
      skip_package_ipa: options[:skip_package_ipa] || true,
      skip_package_pkg: true,
      skip_package_dependencies_resolution: true
    )
  end

  desc 'This action builds the app using the SPM integration'
  lane :build_spm do
    common_pre_build_action
    build_app(workspace: app_workspace,
              scheme: spm_app_scheme,
              sdk: "iphonesimulator",
              configuration: "Debug",
              destination: "generic/platform=iOS Simulator",
              xcargs: "EXCLUDED_ARCHS[sdk=iphonesimulator*]=arm64",
              export_method: "development",
              skip_package_ipa: true,
              skip_package_pkg: true
              )
  end

  desc 'This action runs Unit Tests, builds the app and uploads it to Appetize'
  lane :appetize_build_and_upload do |options|

    build_cocoapods tests: options[:tests] || false

    # Appetize needs the .app to be zipped

    zip_path = "./PrimerSDK_Debug_App.zip"

    zip(
      path: app_output_path,
      output_path: zip_path,
      symlinks: true
    )

    # Find public key of appetize
    # If a build exists with this name, we will overwrite it
    url_end = get_appetize_version_name(build_type, pr_number)
    uri = URI(sdk_demo_api_url + "#{url_end}")
    public_key = Net::HTTP.get(uri)
    puts "public_key: " + public_key

    # Upload to Appetize
    appetize(
      path: zip_path,
      platform: "ios",
      api_token: appetize_api_token,
      public_key: public_key,
      note: sdk_version_name_source_branch
    )

    update_deployment_url(lane_context[SharedValues::APPETIZE_APP_URL])
    update_livedemostore_url(sdk_demo_url + url_end + "/ios")

  end

  ######################### PRIVATE LANES #########################

  desc 'Common build pre-action'
  private_lane :common_pre_build_action do
    next unless ENV["CI"]
    next if ENV["SKIP_SIGNING"]

    set_version_and_build_number

    setup_signing(
      match_type: "development"
    )

  end

  desc 'This action uploads the .ipa to LambdaTest and save its ID into a file'
  private_lane :upload_to_lambdatest_and_save_id do |options|

    upload_to_lambdatest(
      lt_username: ENV["LAMBDATEST_USERNAME"],
      lt_access_key: ENV["LAMBDATEST_ACCESS_KEY"],
      file_path: options[:file_path],
      custom_id: source_branch_trimmed,
      visibility: "team"
    )

    save_lambdatest_id(lambdatest_id: ENV['APP_URL'])

  end

  desc 'This action creates a temporary keychain and installs certificates and provisioning profiles'
  private_lane :setup_signing do |options|

    create_keychain(
      name: ENV["MATCH_KEYCHAIN_NAME"],
      password: ENV["MATCH_KEYCHAIN_PASSWORD"],
      default_keychain: true,
      unlock: true,
      timeout: 3600,
      lock_when_sleeps: true
    )

    match(
      type: options[:match_type],
      readonly: true,
      keychain_name: ENV["MATCH_KEYCHAIN_NAME"],
      keychain_password: ENV["MATCH_KEYCHAIN_PASSWORD"],
    )

  end

  desc 'This action sets the version and build number'
  lane :set_version_and_build_number do |options|
    # The version number is important only for Appetize
    # The build is identified by the contents of CFBundleVersion in Info.plist

    version_name = get_appetize_version_name(build_type, pr_number)

    set_info_plist_value(path: info_plist_path, key: "CFBundleVersion", value: version_name)
    set_info_plist_value(path: info_plist_path, key: "CFBundleShortVersionString", value: "#{version_name}")
  end

  require 'cocoapods-core'

  private_lane :get_sdk_version do
    file_path = "../PrimerSDK.podspec"
    spec = Pod::Specification.from_file(file_path)
    spec.version.to_s
  end

  def get_appetize_version_name(build_type, pr_number)
    case build_type
    when "nightly"
      return "nightly_#{Time.now.strftime("%d.%m.%Y")}"
    when "release"
      return "release_#{get_sdk_version}"
    else
      return "preview_#{pr_number}"
    end
  end

  def update_deployment_url(pub_url)
    sh("echo APPETIZE_APP_URL=#{pub_url} >> $GITHUB_ENV")
  end

  def update_livedemostore_url(url)
    sh("echo LIVEDEMOSTORE_URL=#{url} >> $GITHUB_ENV")
  end

  desc 'Store the LambdaTest ID into a file'
  private_lane :save_lambdatest_id do |options|

    lambdatest_id_to_save = options[:lambdatest_id]
    lambdatest_id_file = "/var/tmp/lambdatest_id.txt" 

    UI.message("Saving #{lambdatest_id_to_save} into #{lambdatest_id_file}")

    File.open(lambdatest_id_file, 'w') { |file| file.write(options[:lambdatest_id]) }

  end

  ################## END PRIVATE LANES ######################

end

#--------------------- END FASTLANE ------------------------#
