name: Post Release PR Merge

on: 
  workflow_dispatch:
  pull_request:
    # Patterns matched against refs/heads
    branches:
      - release/next
    types: [ closed ]

jobs:
  release_merge:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Git - Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          token: ${{ secrets.RELEASE_ACCESS_TOKEN }}
      - name: Install cz
        run: pip install --user -U Commitizen
      - name: Record release version
        run: |
          echo "RELEASE_VERSION=$(cz version --project)" >> $GITHUB_ENV
      - name: Tag release
        run: |
          git tag $RELEASE_VERSION
          git push origin $RELEASE_VERSION
      - name: Create a Release
        uses: elgohr/Github-Release-Action@v4
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_ACCESS_TOKEN }}
        with:
          title: Release ${{ env.RELEASE_VERSION }}
  build-and-upload-to-appetize:
    runs-on: macos-13
    timeout-minutes: 20
    name: "Build and upload app to Appetize"
    steps:
      - name: Cancel previous jobs
        uses: styfle/cancel-workflow-action@0.12.0
        with:
          access_token: ${{ github.token }}
      - name: Git - Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
      - name: Test, Build, and Distribute app to Appetize ðŸš€
        run: |
          bundle exec fastlane appetize_build_and_upload tests:false
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          MATCH_GIT_PRIVATE_KEY: ${{ secrets.SSH_KEY }}
          FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
          FASTLANE_SESSION: ${{ secrets.FASTLANE_SESSION }}
          MATCH_KEYCHAIN_NAME: ${{ secrets.MATCH_KEYCHAIN_NAME }}
          MATCH_KEYCHAIN_PASSWORD: ${{ secrets.MATCH_KEYCHAIN_PASSWORD }}
          APPETIZE_API_TOKEN: ${{ secrets.APPETIZE_API_TOKEN }}
          SOURCE_BRANCH: ${{ github.head_ref }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          PR_NUMBER: ""
      - name: Create Slack Success Summary Report
        if: ${{ success()  }}
        shell: bash
        run: |
          node Report\ Scripts/appetize-success-report-script.js createAppetizeSummaryReport ${{ github.head_ref || github.ref_name }} preview
      - name: Slack Success Notification
        if: ${{ success() }}
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: ${{ secrets.SLACK_MOBILE_SDK_CHANNEL }}
          payload-file-path: '/var/tmp/appetize-success-link-summary.json'
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_REPORTER_BOT_TOKEN }}
      - name: Create Slack Failure Summary Report
        if: ${{ failure() }}
        shell: bash
        run: |
          node Report\ Scripts/appetize-failure-report-script.js createAppetizeSummaryReport ${{ github.head_ref || github.ref_name }}
      - name: Slack Notification
        if: ${{ failure() }}
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: ${{ secrets.SLACK_MOBILE_SDK_CHANNEL }}
          payload-file-path: '/var/tmp/appetize-failure-link-summary.json'
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_REPORTER_BOT_TOKEN }}