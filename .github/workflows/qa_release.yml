name: QA Release

on:
  pull_request:
    types:
      - opened
      - edited
      - synchronize
      - closed
    branches:
      - master

jobs:
  branch:
    runs-on: macos-latest
    timeout-minutes: 40

    # Map a step output to a job output
    outputs:
      branch: ${{ steps.branch_name.outputs.SOURCE_BRANCH }}
    steps:
      - name: Branch name
        id: branch_name
        run: |
          echo ::set-output name=SOURCE_BRANCH::${GITHUB_REF##*/}
      - name: Build base image
        run: |
          echo $SOURCE_BRANCH
        env:
          SOURCE_BRANCH: ${{ steps.branch_name.outputs.SOURCE_BRANCH }}

  build-test:
    needs: branch
    runs-on: macos-11
    timeout-minutes: 15

    steps:
      - name: Cancel previous jobs
        uses: styfle/cancel-workflow-action@0.9.0
        with:
          access_token: ${{ github.token }}

      - name: Git - Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}

      - name: Select Xcode Version
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_KEY }}
          name: id_rsa_github_actions
          known_hosts: ${{ secrets.KNOWN_HOSTS }}

      - uses: webfactory/ssh-agent@v0.4.1
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - uses: actions/setup-ruby@v1
        with:
          ruby-version: "2.6"

      - name: Install Bundler
        run: |
          gem install bundler
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3
          bundle update fastlane
          bundle exec fastlane update_plugins

      # - name: Install Cocoapods
      #   run: gem install cocoapods

      # - name: Run Unit Tests
      #   run: bundle exec fastlane tests

      # - name: Run UI Tests
      #   run: bundle exec fastlane ui_tests

      - name: Create Firebase Service Credentials file
        run: |
          echo "$FIREBASE_CREDENTIALS" > firebase_credentials.json.b64
          base64 -d -i firebase_credentials.json.b64 > firebase_credentials.json
        env:
          FIREBASE_CREDENTIALS: ${{ secrets.FIREBASE_CREDENTIALS }}

      - name: Distribute internally on Firebase & Appetize ðŸš€
        run: |
          bundle exec fastlane qa_release
        env:
          FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          MATCH_GIT_PRIVATE_KEY: ${{ secrets.SSH_KEY }}
          FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
          FASTLANE_SESSION: ${{ secrets.FASTLANE_SESSION }}
          MATCH_KEYCHAIN_NAME: ${{ secrets.MATCH_KEYCHAIN_NAME }}
          MATCH_KEYCHAIN_PASSWORD: ${{ secrets.MATCH_KEYCHAIN_PASSWORD }}
          APPETIZE_API_TOKEN: ${{ secrets.APPETIZE_API_TOKEN }}
          BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
          BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
          SOURCE_BRANCH: ${{ needs.branch.outputs.branch }}

      - name: Set Browserstack ID
        id: set_browserstack_id_step
        run: echo "::set-output name=browserstack_id::$BROWSERSTACK_ID"

  test-via-browserstack:
      runs-on: ubuntu-latest
      needs: build-test
      steps:
        - name: Clone and launch Browserstack tests via Appium ðŸ§ª
          run: |
            git clone https://d4r1091:$GITHUB_TEMP_PATH@github.com/Tino-Primer/primer-mobile-appium.git .
          env:
            GITHUB_TEMP_PATH: ${{ secrets.DARIO_TOKEN_TEMP }}

        - name: Setup node
          uses: actions/setup-node@v1
          with:
            node-version: 18.3.0

        - name: Install
          run: npm install

        - name: Test
          env:
            BROWSERSTACK_ID: ${{secrets.BROWSERSTACK_ID}}
            BROWSERSTACK_USERNAME: ${{secrets.BROWSERSTACK_USERNAME}}
            BROWSERSTACK_ACCESS_KEY: ${{ jobs.build-test.steps.set_browserstack_id_step.outputs.browserstack_id }}
          run: |
            npx wdio config/wdio.ios.bs.conf.js

        - name: Upload logs if needed
          uses: actions/upload-artifact@v1
          if: failure()
          with:
            name: logs
            path: logs

  pod-lint:
    needs: build-test
    runs-on: macOS-latest

    steps:
      - uses: actions/checkout@v1

      - name: Install Cocoapods
        run: gem install cocoapods

      - name: Lint pod
        run: |
          set -eo pipefail
          export LIB_VERSION=$(git describe --tags `git rev-list --tags --max-count=1`)
          pod lib lint --allow-warnings
        env:
          COCOAPODS_TRUNK_TOKEN: ${{ secrets.COCOAPODS_TRUNK_TOKEN }}
