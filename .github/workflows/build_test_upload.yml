name: Build app

on:
  pull_request:
    types:
      - opened
      - edited
      - synchronize

concurrency: 
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  danger:
    runs-on: ubuntu-latest
    name: "Run Danger"
    steps:
      - uses: actions/checkout@v1
      - name: Danger
        uses: docker://ghcr.io/danger/danger-swift:3.13.0
        with:
            args: --failOnErrors --no-publish-check --remove-previous-comments
        env:
          GITHUB_TOKEN: ${{ github.token }}

  spm-build:
    needs: danger
    runs-on: macos-13
    timeout-minutes: 20
    name: "Build app with SPM Integration"
    steps:
      - name: Cancel previous jobs
        uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ github.token }}
      - name: Git - Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
      - name: Select Xcode Version
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.0'
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_KEY }}
          name: id_rsa_github_actions
          known_hosts: ${{ secrets.KNOWN_HOSTS }}
      - uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.2"
          bundler-cache: true
      - name: Build SPM App
        run: |
          bundle exec fastlane build_spm
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          MATCH_GIT_PRIVATE_KEY: ${{ secrets.SSH_KEY }}
          FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
          FASTLANE_SESSION: ${{ secrets.FASTLANE_SESSION }}
          MATCH_KEYCHAIN_NAME: ${{ secrets.MATCH_KEYCHAIN_NAME }}
          MATCH_KEYCHAIN_PASSWORD: ${{ secrets.MATCH_KEYCHAIN_PASSWORD }}
          SOURCE_BRANCH: ${{ github.head_ref }}
          PR_NUMBER: ${{ github.event.pull_request.number }}

  build-and-upload-to-appetize:
    needs: danger
    runs-on: macos-latest
    timeout-minutes: 20
    name: "Build and upload app to Appetize"
    steps:
      - name: Cancel previous jobs
        uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ github.token }}

      - name: Git - Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}

      - name: Select Xcode Version
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_KEY }}
          name: id_rsa_github_actions
          known_hosts: ${{ secrets.KNOWN_HOSTS }}

      - uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.2"
          bundler-cache: true
          
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18.3.0

      - run: npm install --save slack-message-builder

      
      - name: Test, Build, and Distribute app to Appetize ðŸš€
        run: |
          bundle exec fastlane appetize_build_and_upload
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          MATCH_GIT_PRIVATE_KEY: ${{ secrets.SSH_KEY }}
          FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
          FASTLANE_SESSION: ${{ secrets.FASTLANE_SESSION }}
          MATCH_KEYCHAIN_NAME: ${{ secrets.MATCH_KEYCHAIN_NAME }}
          MATCH_KEYCHAIN_PASSWORD: ${{ secrets.MATCH_KEYCHAIN_PASSWORD }}
          APPETIZE_API_TOKEN: ${{ secrets.APPETIZE_API_TOKEN }}
          SOURCE_BRANCH: ${{ github.head_ref }}
          PR_NUMBER: ${{ github.event.pull_request.number }}

      - uses: peter-evans/find-comment@v2
        if: ${{ success() }}
        id: find_comment
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body-includes: Appetize link

      - uses: peter-evans/create-or-update-comment@v2
        if: ${{ success() }}
        with:
          body: |
            Appetize link: ${{ env.APPETIZE_APP_URL }}
          edit-mode: replace
          comment-id: ${{ steps.find_comment.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Create Slack Success Summary Report
        if: ${{ success() && github.event.pull_request.base.ref == 'master'  }}
        run: |
          node Report\ Scripts/appetize-success-report-script.js createAppetizeSummaryReport ${{ github.head_ref || github.ref_name }}
      - name: Slack Success Notification
        if: ${{ success() && github.event.pull_request.base.ref == 'master' }}
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: ${{ secrets.SLACK_MOBILE_SDK_CHANNEL }}
          payload-file-path: '/var/tmp/appetize-success-link-summary.json'
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_REPORTER_BOT_TOKEN }}

      - name: Create Slack Failure Summary Report
        if: ${{ failure() && github.event.pull_request.base.ref == 'master' }}
        run: |
          node Report\ Scripts/appetize-failure-report-script.js createAppetizeSummaryReport ${{ github.head_ref || github.ref_name }}
      - name: Slack Notification
        if: ${{ failure() && github.event.pull_request.base.ref == 'master' }}
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: ${{ secrets.SLACK_MOBILE_SDK_CHANNEL }}
          payload-file-path: '/var/tmp/appetize-failure-link-summary.json'
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_REPORTER_BOT_TOKEN }}


  build-and-upload-to-firebase-and-browserstack:
    needs: danger
    runs-on: macos-latest
    timeout-minutes: 20
    name: "Distribute app to Firebase and Browserstack"
    steps:
      - name: Cancel previous jobs
        uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ github.token }}

      - name: Git - Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}

      - name: Select Xcode Version
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_KEY }}
          name: id_rsa_github_actions
          known_hosts: ${{ secrets.KNOWN_HOSTS }}

      - uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.2"
          bundler-cache: true

      - name: Create Firebase Service Credentials file
        run: |
          echo "$FIREBASE_CREDENTIALS" > firebase_credentials.json.b64
          base64 -d -i firebase_credentials.json.b64 > firebase_credentials.json
        env:
          FIREBASE_CREDENTIALS: ${{ secrets.FIREBASE_CREDENTIALS }}

      - name: Distribute internally on Firebase and upload to Browserstack ðŸš€
        run: |
          bundle exec fastlane qa_release
        env:
          FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
          FIREBASE_COMMA_SEPARATED_TEST_GROUPS: ${{ 'primer-internal' }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          MATCH_GIT_PRIVATE_KEY: ${{ secrets.SSH_KEY }}
          FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
          FASTLANE_SESSION: ${{ secrets.FASTLANE_SESSION }}
          MATCH_KEYCHAIN_NAME: ${{ secrets.MATCH_KEYCHAIN_NAME }}
          MATCH_KEYCHAIN_PASSWORD: ${{ secrets.MATCH_KEYCHAIN_PASSWORD }}
          APPETIZE_API_TOKEN: ${{ secrets.APPETIZE_API_TOKEN }}
          BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
          BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
          SOURCE_BRANCH: ${{ github.head_ref }}
          PR_NUMBER: ${{ github.event.pull_request.number }}

      - name: Save Browserstack ID
        uses: actions/upload-artifact@v3
        id: save_browserstack_id_step
        with:
          name: browserstack_id
          path: /var/tmp/browserstack_id.txt
          if-no-files-found: error

  test-via-browserstack:
      runs-on: ubuntu-latest
      needs: build-and-upload-to-firebase-and-browserstack
      name: "Browserstack test"
      steps:
        - name: Clone and launch Browserstack tests via Appium ðŸ§ª
          run: |
             git clone -b develop https://project_41483872_bot:$GITLAB_TEMP_PATH@gitlab.com/primer-io/dx/mobile-appium-tests.git .
          env:
            GITLAB_TEMP_PATH: ${{ secrets.GITLAB_APPIUM_PULL_KEY }}

        - name: Retrieve Browserstack ID
          uses: actions/download-artifact@v3
          with:
            name: browserstack_id
            path: /var/tmp

        - name: Setup node
          uses: actions/setup-node@v1
          with:
            node-version: 18.3.0

        - name: npm Install
          run: npm install
        
        - run: npm install --save slack-message-builder

        - name: Run Appium Test
          env:
            BROWSERSTACK_USERNAME: ${{secrets.BROWSERSTACK_USERNAME}}
            BROWSERSTACK_ACCESS_KEY: ${{secrets.BROWSERSTACK_ACCESS_KEY}}
          run: |
            export BROWSERSTACK_APP_ID=$(cat /var/tmp/browserstack_id.txt)
            npx wdio config/wdio.ios.bs.conf.js
            
        - name: Create Slack Report
          if: ${{ (success() ||  failure()) && github.event.pull_request.base.ref == 'master'  }}
          run: |
            node report-script/slack-report-script.js createSlackReport iOS

        - name: Post summary message to a Slack channel
          if: ${{ (success() ||  failure()) && github.event.pull_request.base.ref == 'master' }}
          id: slack
          uses: slackapi/slack-github-action@v1.23.0
          with:
            channel-id: ${{ secrets.SLACK_MOBILE_SDK_CHANNEL }}
            payload-file-path: '/var/tmp/slack-minimal_summary.json'
          env:
            SLACK_BOT_TOKEN: ${{ secrets.SLACK_REPORTER_BOT_TOKEN }}

        - name: Create Slack Failed Summary Report
          if: ${{ failure() && github.event.pull_request.base.ref == 'master' }}
          run: |
            node report-script/slack-failed-report-script.js createSlackFailedSummaryReport ${{ steps.slack.outputs.thread_ts }}
          env:
            BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
            BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}

        - name: Post detailed summary to Slack channel thread
          if: ${{ failure() && github.event.pull_request.base.ref == 'master' }}
          id: slack_thread
          uses: slackapi/slack-github-action@v1.23.0
          with:
            channel-id: ${{ secrets.SLACK_MOBILE_SDK_CHANNEL }}
            payload-file-path: '/var/tmp/slack_failed_summary.json'
          env:
            SLACK_BOT_TOKEN: ${{ secrets.SLACK_REPORTER_BOT_TOKEN }}

        - name: Create and post Github summary
          if: ${{ success() || failure() }}
          run: |
            node report-script/github-tests-summary-script.js createGithubSummaryReport
