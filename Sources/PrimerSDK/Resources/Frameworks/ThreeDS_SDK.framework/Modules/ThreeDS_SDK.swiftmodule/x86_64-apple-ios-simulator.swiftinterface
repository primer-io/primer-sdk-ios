// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.2.4 (swiftlang-1103.0.32.9 clang-1103.0.32.53)
// swift-module-flags: -target x86_64-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ThreeDS_SDK
import AdSupport
import CommonCrypto
import CoreLocation
import Foundation
import Security
import Swift
@_exported import ThreeDS_SDK
import UIKit
import WebKit
import os.log
import os
@_inheritsConvenienceInitializers @objc(NCAThreeDS2Error) @objcMembers public class ThreeDS2Error : ObjectiveC.NSObject {
  @objc public static func InvalidInput(message: Swift.String, cause: Swift.Error?) -> Swift.Error
  @objc public static func SDKAlreadyInitialized(message: Swift.String, cause: Swift.Error?) -> Swift.Error
  @objc public static func SDKNotInitialized(message: Swift.String, cause: Swift.Error?) -> Swift.Error
  @objc public static func SDKRuntime(message: Swift.String, errorCode: Swift.String?, cause: Swift.Error?) -> Swift.Error
  @objc deinit
  @objc override dynamic public init()
}
public enum ThreeDS2ErrorCode : Swift.String {
  case transactionIsAlreadyClosed
  case challengeAlreadyInProgress
  case transactionCannotBeClosedChallengeInProdgress
  case errorCreatingTransaction
  case progresViewInitializationFailed
  case noLogoImageForGivenDirectoryServerID
  case missingConfigurationForScheme
  case licenseKeyMissing
  case licenseFormatInvalid
  case licenseExpired
  case licenseSignatureInvalid
  case licenseInvalid
  case errorGettingSDKVersion
  case challengeError
  case challengeProcessingFailed
  case failedToHandleChallengeResponse
  case failedToSendChallengeRequest
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@objc(NCAErrorMessage) @objcMembers public class ErrorMessage : ObjectiveC.NSObject, Swift.Codable {
  @objc public init(transactionID: Swift.String, errorCode: Swift.String, errorDescription: Swift.String, errorDetail: Swift.String?)
  @objc public func getTransactionID() -> Swift.String
  @objc public func getErrorCode() -> Swift.String
  @objc public func getErrorDescription() -> Swift.String
  @objc public func getErrorDetail() -> Swift.String?
  @objc deinit
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class SDKChallengeTimeout : ThreeDS_SDK.ChallengeTimeout {
  public func start(timeoutFunc: @escaping () -> Swift.Void)
  public func stop()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(NCAConfigurationBuilder) @objcMembers public class ConfigurationBuilder : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public func license(key: Swift.String) throws
  @objc public func restrictedParameters(_ parameters: [Swift.String]) throws
  @objc public func add(_ scheme: ThreeDS_SDK.Scheme) throws
  @objc public func log(to level: ThreeDS_SDK.LogLevel) throws
  @objc public func configParameters() -> ThreeDS_SDK.ConfigParameters
  @objc deinit
}
@objc(NCAProgressDialog) public protocol ProgressDialog {
  @objc func start()
  @objc func stop()
}
@objc(NCASeverity) public enum Severity : Swift.Int, Swift.RawRepresentable {
  case LOW
  case MEDIUM
  case HIGH
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: ThreeDS_SDK.Severity.RawValue)
}
@objc(NCAWarning) @objcMembers public class Warning : ObjectiveC.NSObject {
  @objc public init(warningId: Swift.String, message: Swift.String, severity: ThreeDS_SDK.Severity)
  @objc public func getID() -> Swift.String
  @objc public func getMessage() -> Swift.String
  @objc public func getSeverity() -> ThreeDS_SDK.Severity
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers @objc(NCACompletionEvent) @objcMembers public class CompletionEvent : ObjectiveC.NSObject {
  @objc public func getSDKTransactionID() -> Swift.String
  @objc public func getTransactionStatus() -> Swift.String
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objc(NCALabelCustomization) @objcMembers public class LabelCustomization : ThreeDS_SDK.Customization {
  @objc public func setHeadingTextColor(hexColorCode: Swift.String) throws
  @objc public func setHeadingDarkTextColor(hexColorCode: Swift.String) throws
  @objc public func setHeadingTextFontName(fontName: Swift.String) throws
  @objc public func setHeadingTextFontSize(fontSize: Swift.Int) throws
  @objc public func getHeadingTextColor() -> Swift.String
  @objc public func getHeadingTextFontName() -> Swift.String
  @objc public func getHeadingTextFontSize() -> Swift.Int
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
  @objc required dynamic public init()
}
@_hasMissingDesignatedInitializers public class ASN1Identifier : Swift.CustomStringConvertible {
  public enum Class : Swift.UInt8 {
    case universal
    case application
    case contextSpecific
    case `private`
    public typealias RawValue = Swift.UInt8
    public init?(rawValue: Swift.UInt8)
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public enum TagNumber : Swift.UInt8 {
    case endOfContent
    case boolean
    case integer
    case bitString
    case octetString
    case null
    case objectIdentifier
    case objectDescriptor
    case external
    case read
    case enumerated
    case embeddedPdv
    case utf8String
    case relativeOid
    case sequence
    case set
    case numericString
    case printableString
    case t61String
    case videotexString
    case ia5String
    case utcTime
    case generalizedTime
    case graphicString
    case visibleString
    case generalString
    case universalString
    case characterString
    case bmpString
    public typealias RawValue = Swift.UInt8
    public init?(rawValue: Swift.UInt8)
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public func typeClass() -> ThreeDS_SDK.ASN1Identifier.Class
  public func isPrimitive() -> Swift.Bool
  public func isConstructed() -> Swift.Bool
  public func tagNumber() -> ThreeDS_SDK.ASN1Identifier.TagNumber
  public var description: Swift.String {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(NCAChallengeParameters) @objcMembers public class ChallengeParameters : ObjectiveC.NSObject {
  @objc public init(threeDSServerTransactionID: Swift.String?, acsTransactionID: Swift.String?, acsRefNumber: Swift.String?, acsSignedContent: Swift.String?)
  @objc override dynamic public init()
  @objc public func set3DSServerTransactionID(threeDSServerTransactionID: Swift.String)
  @objc public func setAcsTransactionID(acsTransactionID: Swift.String)
  @objc public func setAcsRefNumber(acsRefNumber: Swift.String)
  @objc public func setAcsSignedContent(acsSignedContent: Swift.String)
  @objc public func setThreeDSRequestorAppURL(threeDSRequestorAppURL: Swift.String)
  @objc public func get3DSServerTransactionID() -> Swift.String?
  @objc public func getAcsTransactionID() -> Swift.String?
  @objc public func getAcsRefNumber() -> Swift.String?
  @objc public func getAcsSignedContent() -> Swift.String?
  @objc public func getThreeDSRequestorAppURL() -> Swift.String?
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(NCAThreeDS2ServiceSDK) @objcMembers public class ThreeDS2ServiceSDK : ObjectiveC.NSObject, ThreeDS_SDK.ThreeDS2Service {
  @objc public init(bundle: Foundation.Bundle)
  @objc convenience override dynamic public init()
  @objc public func initialize(_ configParameters: ThreeDS_SDK.ConfigParameters, locale: Swift.String?, uiCustomization: ThreeDS_SDK.UiCustomization?) throws
  @objc public func createTransaction(directoryServerId: Swift.String, messageVersion: Swift.String?) throws -> ThreeDS_SDK.Transaction
  @objc public func getWarnings() throws -> [ThreeDS_SDK.Warning]
  @objc public func getSDKVersion() throws -> Swift.String
  @objc public func cleanup() throws
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(NCAThreeDSSDKAppDelegate) @objcMembers public class ThreeDSSDKAppDelegate : ObjectiveC.NSObject {
  @objc public static let shared: ThreeDS_SDK.ThreeDSSDKAppDelegate
  @objc public func appOpened(url: Foundation.URL) -> Swift.Bool
  @objc public func appOpened(userActivity: Foundation.NSUserActivity) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ASN1Object : Swift.CustomStringConvertible {
  public var rawValue: Foundation.Data?
  public var value: Any?
  public var identifier: ThreeDS_SDK.ASN1Identifier?
  public func sub(_ index: Swift.Int) -> ThreeDS_SDK.ASN1Object?
  public func subCount() -> Swift.Int
  public func findOid(_ oid: Swift.String) -> ThreeDS_SDK.ASN1Object?
  public var description: Swift.String {
    get
  }
  @objc deinit
}
@objc(NCAThreeDS2Service) public protocol ThreeDS2Service {
  @objc func initialize(_ configParameters: ThreeDS_SDK.ConfigParameters, locale: Swift.String?, uiCustomization: ThreeDS_SDK.UiCustomization?) throws
  @objc func createTransaction(directoryServerId: Swift.String, messageVersion: Swift.String?) throws -> ThreeDS_SDK.Transaction
  @objc func getWarnings() throws -> [ThreeDS_SDK.Warning]
  @objc func getSDKVersion() throws -> Swift.String
  @objc func cleanup() throws
}
@objc(NCAAuthenticationRequestParameters) @objcMembers public class AuthenticationRequestParameters : ObjectiveC.NSObject {
  @objc public init(sdkTransactionId: Swift.String, deviceData: Swift.String, sdkEphemeralPublicKey: Swift.String, sdkAppId: Swift.String, sdkReferenceNumber: Swift.String, messageVersion: Swift.String) throws
  @objc public func getDeviceData() -> Swift.String
  @objc public func getSDKTransactionId() -> Swift.String
  @objc public func getSDKAppID() -> Swift.String
  @objc public func getSDKReferenceNumber() -> Swift.String
  @objc public func getSDKEphemeralPublicKey() -> Swift.String
  @objc public func getMessageVersion() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(NCAScheme) @objcMembers public class Scheme : ObjectiveC.NSObject, Foundation.NSCopying {
  @objc public var ids: [Swift.String]?
  @objc public var logoImageName: Swift.String?
  @objc public var encryptionKeyValue: Swift.String?
  @objc public var rootCertificateValue: Swift.String?
  @objc public init(name: Swift.String)
  @objc public init(name: Swift.String, ids: [Swift.String]?, logoImageName: Swift.String?, encryption: Swift.String?, root: Swift.String?)
  @objc override dynamic public init()
  @objc deinit
}
extension Scheme {
  @objc dynamic public func copy(with _: ObjectiveC.NSZone? = nil) -> Any
}
extension Scheme {
  @objc public static func mastercard() -> ThreeDS_SDK.Scheme
  @objc public static func visa() -> ThreeDS_SDK.Scheme
  @objc public static func amex() -> ThreeDS_SDK.Scheme
  @objc public static func diners() -> ThreeDS_SDK.Scheme
  @objc public static func union() -> ThreeDS_SDK.Scheme
  @objc public static func jcb() -> ThreeDS_SDK.Scheme
}
@_inheritsConvenienceInitializers @objc(NCATextBoxCustomization) @objcMembers public class TextBoxCustomization : ThreeDS_SDK.Customization {
  @objc public func setBorderWidth(borderWidth: Swift.Int) throws
  @objc public func setBorderColor(hexColorCode: Swift.String) throws
  @objc public func setDarkBorderColor(hexColorCode: Swift.String) throws
  @objc public func setCornerRadius(cornerRadius: Swift.Int) throws
  @objc public func getBorderWidth() -> Swift.Int
  @objc public func getBorderColor() -> Swift.String
  @objc public func getCornerRadius() -> Swift.Int
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
  @objc required dynamic public init()
}
@_cdecl("detectedWarnings")
public func detectedWarnings() -> [ThreeDS_SDK.Warning]
@_cdecl("callbackJailbreak")
public func addJailbreakWarning()
@_cdecl("callbackIntegrity")
public func addIntegrityWarning()
public func addSimulatorWarning()
@_cdecl("callbackDebugger")
public func addDebuggerWarning()
public func addOSVersionWarning()
@objc(NCALogLevel) public enum LogLevel : Swift.Int, Swift.RawRepresentable {
  case debug
  case info
  case error
  case noLog
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init(rawValue: ThreeDS_SDK.LogLevel.RawValue)
}
@objc(NCARuntimeErrorEvent) @objcMembers public class RuntimeErrorEvent : ObjectiveC.NSObject {
  @objc public init(errorCode: Swift.String?, errorMessage: Swift.String)
  @objc public func getErrorCode() -> Swift.String?
  @objc public func getErrorMessage() -> Swift.String
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objc(NCADsRidValues) @objcMembers public class DsRidValues : ObjectiveC.NSObject {
  @objc public static let mastercard: Swift.String
  @objc public static let visa: Swift.String
  @objc public static let amex: Swift.String
  @objc public static let diners: Swift.String
  @objc public static let union: Swift.String
  @objc public static let jcb: Swift.String
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objc(NCAToolbarCustomization) @objcMembers public class ToolbarCustomization : ThreeDS_SDK.Customization {
  @objc public func setBackgroundColor(hexColorCode: Swift.String) throws
  @objc public func setDarkBackgroundColor(hexColorCode: Swift.String) throws
  @objc public func setHeaderText(headerText: Swift.String) throws
  @objc public func setButtonText(buttonText: Swift.String) throws
  @objc public func getBackgroundColor() -> Swift.String
  @objc public func getHeaderText() -> Swift.String
  @objc public func getButtonText() -> Swift.String
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
  @objc required dynamic public init()
}
@_inheritsConvenienceInitializers @objc(NCAButtonCustomization) @objcMembers public class ButtonCustomization : ThreeDS_SDK.Customization {
  @objc public func setBackgroundColor(hexColorCode: Swift.String) throws
  @objc public func setDarkBackgroundColor(hexColorCode: Swift.String) throws
  @objc public func setCornerRadius(cornerRadius: Swift.Int) throws
  @objc public func getBackgroundColor() -> Swift.String
  @objc public func getCornerRadius() -> Swift.Int
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
  @objc required dynamic public init()
}
@_hasMissingDesignatedInitializers public class ChallengeValues {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ASN1DERDecoder {
  public static func decode(data: Foundation.Data) throws -> [ThreeDS_SDK.ASN1Object]
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(NCACustomization) @objcMembers public class Customization : ObjectiveC.NSObject, Foundation.NSCopying {
  @objc required override dynamic public init()
  @objc public func setTextFontName(fontName: Swift.String) throws
  @objc public func setTextColor(hexColorCode: Swift.String) throws
  @objc public func setDarkTextColor(hexColorCode: Swift.String) throws
  @objc public func setTextFontSize(fontSize: Swift.Int) throws
  @objc public func getTextFontName() -> Swift.String
  @objc public func getTextColor() -> Swift.String
  @objc public func getTextFontSize() -> Swift.Int
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(NCAUiCustomization) @objcMembers public class UiCustomization : ObjectiveC.NSObject, Foundation.NSCopying {
  @objc override dynamic public init()
  @objc public func setButtonCustomization(buttonCustomization: ThreeDS_SDK.ButtonCustomization, buttonType: ThreeDS_SDK.UiCustomization.ButtonType)
  @objc public func setButtonCustomization(buttonCustomization: ThreeDS_SDK.ButtonCustomization, btnType: Swift.String) throws
  @objc public func setToolbarCustomization(toolbarCustomization: ThreeDS_SDK.ToolbarCustomization)
  @objc public func setLabelCustomization(labelCustomization: ThreeDS_SDK.LabelCustomization)
  @objc public func setTextBoxCustomization(textBoxCustomization: ThreeDS_SDK.TextBoxCustomization)
  @objc public func getButtonCustomization(buttonType: ThreeDS_SDK.UiCustomization.ButtonType) -> ThreeDS_SDK.ButtonCustomization?
  @objc public func getButtonCustomization(btnType: Swift.String) -> ThreeDS_SDK.ButtonCustomization?
  @objc public func getToolbarCustomization() -> ThreeDS_SDK.ToolbarCustomization?
  @objc public func getLabelCustomization() -> ThreeDS_SDK.LabelCustomization?
  @objc public func getTextboxCustomization() -> ThreeDS_SDK.TextBoxCustomization?
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
extension UiCustomization {
  @objc(NCAButtonType) public enum ButtonType : Swift.Int, Swift.RawRepresentable {
    case SUBMIT
    case CONTINUE
    case NEXT
    case CANCEL
    case RESEND
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
    public init?(rawValue: ThreeDS_SDK.UiCustomization.ButtonType.RawValue)
  }
}
@objc(NCAProtocolErrorEvent) @objcMembers public class ProtocolErrorEvent : ObjectiveC.NSObject {
  @objc public init(sdkTransactionID: Swift.String, errorMessage: ThreeDS_SDK.ErrorMessage)
  @objc public func getSDKTransactionID() -> Swift.String
  @objc public func getErrorMessage() -> ThreeDS_SDK.ErrorMessage
  @objc deinit
  @objc override dynamic public init()
}
@objc(NCATransaction) public protocol Transaction {
  @objc func getAuthenticationRequestParameters() throws -> ThreeDS_SDK.AuthenticationRequestParameters
  @objc func doChallenge(challengeParameters: ThreeDS_SDK.ChallengeParameters, challengeStatusReceiver: ThreeDS_SDK.ChallengeStatusReceiver, timeOut: Swift.Int, inViewController: UIKit.UIViewController) throws
  @objc func getProgressView() throws -> ThreeDS_SDK.ProgressDialog
  @objc func close() throws
}
public protocol ChallengeTimeout {
  func start(timeoutFunc: @escaping () -> Swift.Void)
  func stop()
}
@objc(NCAChallengeStatusReceiver) public protocol ChallengeStatusReceiver {
  @objc func completed(completionEvent: ThreeDS_SDK.CompletionEvent)
  @objc func cancelled()
  @objc func timedout()
  @objc func protocolError(protocolErrorEvent: ThreeDS_SDK.ProtocolErrorEvent)
  @objc func runtimeError(runtimeErrorEvent: ThreeDS_SDK.RuntimeErrorEvent)
}
precedencegroup ForwardPipe {
  associativity: left
  higherThan: LogicalConjunctionPrecedence
}
infix operator |> : ForwardPipe
extension ThreeDS_SDK.ThreeDS2ErrorCode : Swift.Equatable {}
extension ThreeDS_SDK.ThreeDS2ErrorCode : Swift.Hashable {}
extension ThreeDS_SDK.ThreeDS2ErrorCode : Swift.RawRepresentable {}
extension ThreeDS_SDK.Severity : Swift.Equatable {}
extension ThreeDS_SDK.Severity : Swift.Hashable {}
extension ThreeDS_SDK.ASN1Identifier.Class : Swift.Equatable {}
extension ThreeDS_SDK.ASN1Identifier.Class : Swift.Hashable {}
extension ThreeDS_SDK.ASN1Identifier.Class : Swift.RawRepresentable {}
extension ThreeDS_SDK.ASN1Identifier.TagNumber : Swift.Equatable {}
extension ThreeDS_SDK.ASN1Identifier.TagNumber : Swift.Hashable {}
extension ThreeDS_SDK.ASN1Identifier.TagNumber : Swift.RawRepresentable {}
extension ThreeDS_SDK.LogLevel : Swift.Equatable {}
extension ThreeDS_SDK.LogLevel : Swift.Hashable {}
extension ThreeDS_SDK.UiCustomization.ButtonType : Swift.Equatable {}
extension ThreeDS_SDK.UiCustomization.ButtonType : Swift.Hashable {}
